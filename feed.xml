<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>彭元彬</title><subtitle>利用分析模式和设计模式剖析JAVA源码.</subtitle> <updated>2021-08-11T15:36:39+08:00</updated> <author> <name>pengyuanbing</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 pengyuanbing </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>UML精粹：标准对象建模语言简明指南</title><link href="/posts/uml/" rel="alternate" type="text/html" title="UML精粹：标准对象建模语言简明指南" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-04-13T11:33:00+08:00</updated> <id>/posts/uml/</id> <content src="/posts/uml/" /> <author> <name>pengyuanbing</name> </author> <category term="读书笔记" /> <category term="UML" /> <category term="UML精粹" /> <category term="未完待续" /> <summary> 类图 基础部分 一个类图表述系统中各个对象的类型及其存在的各种静态关系. 类图也明示类中的特性和操作以及用于对象连接方式的约束.UML使用特性(feature)一词作为涵盖类之特性与操作的一般术语. 简单类图 特性 特性是一个单一的概念, 但它出现了两种截然不同的表示中: 属性及关联. 属性: 属性图示法把特性表述成类框中的一行正文. 属性的全形态: 可见性 名:类型 重数=默认{特征串} 名:String[1]="Untlitled"{readOnly} 可见性: 属性是否是公用(+)或私用(-) 属性名: 类如何指称属性. 高级概念 </summary> </entry> <entry><title>Spring MVC</title><link href="/posts/spring-mvc/" rel="alternate" type="text/html" title="Spring MVC" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-08-09T11:48:18+08:00</updated> <id>/posts/spring-mvc/</id> <content src="/posts/spring-mvc/" /> <author> <name>pengyuanbing</name> </author> <category term="Spring" /> <category term="Spring MVC" /> <category term="Servlet" /> <category term="Tomcat" /> <category term="未完待续" /> <summary> 本文主要是深入浅出 Spring MVC 的工作原理; 理解基于Servlet, Tomcat各个服务组件的调用和使用方式, 简单的自定义使用这些组件(基类,接口). https://github.com/iokays/Samples/tree/main/spring_web 一个例子 @RestController @SpringBootApplication public class SpringMvcSample { @ApiOperation(value = "/", notes = "print hello") @GetMapping(value = "/") public String hello() { return "hello"; } public static void main(String[] args) { Sp... </summary> </entry> <entry><title>设计模式与UML</title><link href="/posts/design-pattern/" rel="alternate" type="text/html" title="设计模式与UML" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-06-16T19:29:55+08:00</updated> <id>/posts/design-pattern/</id> <content src="/posts/design-pattern/" /> <author> <name>pengyuanbing</name> </author> <category term="设计模式" /> <category term="未完待续" /> <summary> 工厂方法模式 Factory Method Pattern 抽象工厂模式 Abstract Factory Pattern 建造者模式 Builder Pattern 原型模式 Prototype Pattern 单例模式 Singleton Pattern 适配器模式 Adapter Pattern 桥梁模式/桥接模式 Bridge Pattern 组合模式 Composite Pattern 装饰模式 Decorator Pattern 门面模式/外观模式 Facade Pattern 享元模式 Flyweight Pattern 代理模式 Proxy pattern 责任链模式 Chain of Responsibility Pattern 命令模式 Command Pattern 解释器模式 Interpreter Pattern 迭代器模式 Iterator Pattern... </summary> </entry> <entry><title>Spring AOP</title><link href="/posts/spring-aop/" rel="alternate" type="text/html" title="Spring AOP" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-06-16T19:29:55+08:00</updated> <id>/posts/spring-aop/</id> <content src="/posts/spring-aop/" /> <author> <name>pengyuanbing</name> </author> <category term="Spring" /> <category term="Spring AOP" /> <category term="未完待续" /> <summary> JDK 动态代理 @ApiModel(description = "JDK动态代理实例") public class JdkProxySample { public static void main(String[] args) { final QuackBehavior quack = () -&amp;gt; System.out.println("呱呱叫"); final QuackInvocationHandler quackInvocationHandler = new QuackInvocationHandler(quack); final QuackBehavior duck = (QuackBehavior) Proxy.newProxyInstance( quack.getCl... </summary> </entry> </feed>
