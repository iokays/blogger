[ { "title": "UML精粹：标准对象建模语言简明指南", "url": "/posts/uml/", "categories": "读书笔记, UML, UML精粹, 未完待续", "tags": "读书笔记, UML, 未完待续", "date": "2021-04-13 11:33:00 +0800", "snippet": "类图 基础部分一个类图表述系统中各个对象的类型及其存在的各种静态关系. 类图也明示类中的特性和操作以及用于对象连接方式的约束.UML使用特性(feature)一词作为涵盖类之特性与操作的一般术语.简单类图特性特性是一个单一的概念, 但它出现了两种截然不同的表示中: 属性及关联. 属性:属性图示法把特性表述成类框中的一行正文. 属性的全形态:可见性 名:类型 重数=默认{特征串}名:String[1]=&quot;Untlitled&quot;{readOnly}可见性: 属性是否是公用(+)或私用(-)属性名: 类如何指称属性. 高级概念" }, { "title": "Spring MVC", "url": "/posts/spring-mvc/", "categories": "Spring, Spring MVC, Servlet, Tomcat, 未完待续", "tags": "Spring, Spring MVC, Servlet, Tomcat, 未完待续", "date": "2021-04-13 11:33:00 +0800", "snippet": "本文主要是深入浅出 Spring MVC 的工作原理; 理解基于Servlet, Tomcat各个服务组件的调用和使用方式, 简单的自定义使用这些组件(基类,接口).https://github.com/iokays/Samples/tree/main/spring_web一个例子@RestController@SpringBootApplicationpublic class SpringMvcSample { @ApiOperation(value = &quot;/&quot;, notes = &quot;print hello&quot;) @GetMapping(valu..." }, { "title": "设计模式与UML", "url": "/posts/design-pattern/", "categories": "设计模式, 未完待续", "tags": "设计模式, UML, Design Pattern, 未完待续", "date": "2021-04-13 11:33:00 +0800", "snippet": "工厂方法模式 Factory Method Pattern抽象工厂模式 Abstract Factory Pattern建造者模式 Builder Pattern原型模式 Prototype Pattern单例模式 Singleton Pattern适配器模式 Adapter Pattern桥梁模式/桥接模式 Bridge Pattern组合模式 Composite Pattern装饰模式 Decorator Pattern门面模式/外观模式 Facade Pattern享元模式 Flyweight Pattern代理模式 Proxy pattern责任链模式 Chain of Resp..." }, { "title": "Spring AOP", "url": "/posts/spring-aop/", "categories": "Spring, Spring AOP, 未完待续", "tags": "Spring, Spring AOP, JDK动态代理, CGLIB, Aopalliance, 未完待续", "date": "2021-04-13 11:33:00 +0800", "snippet": "JDK 动态代理@ApiModel(description = &quot;JDK动态代理实例&quot;)public class JdkProxySample { public static void main(String[] args) { final QuackBehavior quack = () -&amp;gt; System.out.println(&quot;呱呱叫&quot;); final QuackInvocationHandler quackInvocationHandler = new QuackInvocationHand..." } ]
